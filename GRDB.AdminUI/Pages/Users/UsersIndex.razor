

@if(Model != null && Model.Any())
{
   <table class="table mt-2">
        <thead>
            <tr>
                <th class="ms-5">User ID</th>
                <th class="ms-5">User Name</th>
                <th class="ms-5">User Email</th>
                <th class="ms-5">User Roles</th>
                <th><div class="d-flex me-1 justify-content-end px-2"><p>Actions</p></div></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in GetItemsForCurrentPage())
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Username</td>
                    <td>@item.Email</td>
                    <td>@string.Join(',',item.Roles)</td>
                    <td>
                        <div class="d-flex me-1 justify-content-end">
                            <button class="btn btn-outline-primary rounded-0 me-1" @onclick="@(() => OnClick.InvokeAsync(new ClickModel(PageType.ChangePassword,item.Id)))">Change Password</button>
                            <button class="btn btn-outline-primary rounded-0 me-1" @onclick="@(() => OnClick.InvokeAsync(new ClickModel(PageType.ChangeRole, item.Id)))">Change Role</button>
                            <button class="btn btn-outline-danger rounded-0" @onclick="@(() => OnClick.InvokeAsync(new ClickModel(PageType.Delete, item.Id)))">Delete</button>                           
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex flex-row justify-content-around align-items-center mb-5">
        <button class="btn btn-primary" @onclick="GoToPreviousPage" disabled="@IsFirstPage">Previous</button>
        <span>Page @CurrentPage of @TotalPages</span>
        <button class="btn btn-primary" @onclick="GoToNextPage" disabled="@IsLastPage">Next</button>
    </div>
 }   
else
    {
<p>No authors found</p>
    }


@code {
    [Parameter] public List<LoggedUser> Model { get; set; } = new();
    [Parameter] public EventCallback<ClickModel> OnClick { get; set; }

    private int CurrentPage = 1;
    private int ItemsPerPage = 20;
    private int TotalPages => (int)Math.Ceiling((double)Model.Count / ItemsPerPage);
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private IEnumerable<LoggedUser> GetItemsForCurrentPage()
    {
        return Model.Skip((CurrentPage - 1) * ItemsPerPage).Take(ItemsPerPage);
    }

    private void GoToPreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
        }
    }

    private void GoToNextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
        }
    }
}
