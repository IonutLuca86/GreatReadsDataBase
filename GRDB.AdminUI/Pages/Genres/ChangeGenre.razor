
@inject CustomAuthenticationStateProvider authService
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient



    <div class="d-xl-flex justify-content-center">
<EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
    <DataAnnotationsValidator />
    <h4>@Page Genre</h4>
    <div class="mb-3">
        @if (Page.Equals(PageType.Delete))
        {
        <InputText id="name" class="form-control me-2" @bind-Value="Model.Name" disabled placeholder="Name"></InputText>
        }
        else
        {
        <InputText id="name" class="form-control me-2" @bind-Value="Model.Name" placeholder="Name"></InputText>
    }
        <ValidationMessage For="@(() => Model.Name)" />
    </div>
    <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "success") rounded-0">@Page</button>


</EditForm>
</div>

@code {


    [Parameter] public GenreDTO Model { get; set; } = new();
    [Parameter] public string Page { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnChange { get; set; }


   protected override async Task OnInitializedAsync()
    {
        if (!await authService.IsAuthenticatedAsync())
        {
            NavigationManager.NavigateTo("/Login");
        }
    }

    private async Task OnFormSubmit()
    {

        try
        {
            if (Page.Equals(PageType.Create))
            {
                await InsertGenre(Model);        
            }
            else if (Page.Equals(PageType.Edit))
            {
                await EditGenre(Model.Id,Model);           
            }
            else if (Page.Equals(PageType.Delete))
            {
                await DeleteGenre(Model.Id);                
            }
            await OnChange.InvokeAsync("");
        }
        catch
        {
            await OnChange.InvokeAsync($"Couldn't process the Genre entry!");
        }
    }

    private async Task InsertGenre(GenreCreateDTO genre)
    {
       
        try
        {
            string token = await authService.GetTokenAsync();
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",token);
            var response = await _httpClient.PostAsJsonAsync("api/Genre", genre);
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex) { Console.WriteLine(ex); }

              
    }
    private async Task EditGenre(int id, GenreDTO genre)
    {
        try
        {
            string token = await authService.GetTokenAsync();
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await _httpClient.PutAsJsonAsync($"api/Genre/{id}", genre);
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex) { Console.WriteLine(ex); }
    }
    private async Task DeleteGenre(int id)
    {
        try
        {
            string token = await authService.GetTokenAsync();
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await _httpClient.DeleteAsync($"api/Genre/{id}");
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex) { Console.WriteLine(ex); }
    }
}