@inject HttpClient _httpClient
@inject CustomAuthenticationStateProvider authService
@inject NavigationManager NavigationManager


<div class="d-xl-flex justify-content-center">
    <EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
        <DataAnnotationsValidator />
        <h4>@Page Authors</h4>
        <div class="mb-3">
            @if (Page.Equals(PageType.Delete))
            {
                <InputText id="name" class="form-control me-2" @bind-Value="Model.AuthorName" disabled placeholder="Author Name"></InputText>
            }
            else
            {
                <InputText id="name" class="form-control me-2" @bind-Value="Model.AuthorName" placeholder="Author Name"></InputText>
                <InputText id="name" class="form-control me-2" @bind-Value="Model.BirthDate" placeholder="Birthdate"></InputText>
                <InputText id="name" class="form-control me-2" @bind-Value="Model.WorkCount" placeholder="Work Count"></InputText>
            }
            <ValidationMessage For="@(() => Model.AuthorName)" />
            <ValidationMessage For="@(() => Model.BirthDate)" />
            <ValidationMessage For="@(() => Model.WorkCount)" />
        </div>
        <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "success") rounded-0">@Page</button>


    </EditForm>
</div>

@code {


    [Parameter] public AuthorDTO Model { get; set; } = new();
    [Parameter] public string Page { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnChange { get; set; }
    

 
    private async Task OnFormSubmit()
    {
      
        try
        {
            if (Page.Equals(PageType.Create))
            {
                await InsertAuthor(Model);               
            }
            else if (Page.Equals(PageType.Edit))
            {
                await EditAuthor(Model.Id);         
            }
            else if (Page.Equals(PageType.Delete))
            {
                await DeleteAuthor(Model.Id);          
            }


            await OnChange.InvokeAsync("");
        }
        catch
        {
            await OnChange.InvokeAsync($"Couldn't process the Author entry!");
        }
    }
    
    private async Task InsertAuthor(AuthorDTO author)
    {
        try
        {
            string token = await authService.GetTokenAsync();
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await _httpClient.PostAsJsonAsync("api/Authors", author);
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex) { Console.WriteLine(ex); }
    }
    private async Task EditAuthor(int id)
    {
        try
        {
            string token = await authService.GetTokenAsync();
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await _httpClient.PutAsJsonAsync($"api/Authors/{id}", Model);
            response.EnsureSuccessStatusCode();
            //return await response.Content.ReadFromJsonAsync<AuthorDTO>();
        }
        catch (Exception ex) { Console.WriteLine(ex);  }
    }
    private async Task DeleteAuthor(int id)
    {
        try
        {
            string token = await authService.GetTokenAsync();
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await _httpClient.DeleteAsync($"api/Authors/{id}");
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex) { Console.WriteLine(ex); }
    }

}